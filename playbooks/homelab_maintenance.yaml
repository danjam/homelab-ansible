---
# Homelab System Maintenance Playbook
# Purpose: Perform system updates and manage Docker containers
# Usage: ansible-playbook homelab_maintenance.yaml [--tags system,docker,backup]

- name: Notify Maintenance Start
  hosts: homelab
  gather_facts: yes
  tasks:
    - name: Record start time
      ansible.builtin.set_fact:
        global_start_time: "{{ ansible_date_time.iso8601 }}"
      tags: always
      run_once: true
      
    - name: Send start notification
      ansible.builtin.import_tasks: ../tasks/send_notification.yaml
      vars:
        notification_subject: "ðŸš€ LabOps Maintenance Starting"
        notification_body: |
          Maintenance operations are starting on {{ ansible_play_hosts | length }} host(s).
          Targeted hosts: {{ ansible_play_hosts | join(', ') }}
          Starting at: {{ ansible_date_time.iso8601 }}
      when: notification_enabled | default(false) | bool
      run_once: true
      tags: ['notification', 'always']

- name: Homelab System Maintenance
  hosts: homelab
  gather_facts: yes
  vars:
    docker_path: "{{ default_docker_path | default('/opt/homelab') }}"
    update_timeout: 600
    reboot_timeout: 300
    post_reboot_delay: 30
    notification_enabled: "{{ enable_monitoring | default(false) | bool }}"

  pre_tasks:
    - name: Record maintenance start time
      ansible.builtin.set_fact:
        maintenance_start_time: "{{ ansible_date_time.iso8601 }}"
      tags: always

    # - name: Notify maintenance start
    #   ansible.builtin.import_tasks: ../tasks/send_notification.yaml
    #   vars:
    #     notification_subject: "ðŸ§° Maintenance starting on {{ inventory_hostname }}"
    #     notification_body: "System maintenance is starting at {{ maintenance_start_time }}"
    #   when: notification_enabled | bool
    #   tags: ['notification']

  tasks:
    - name: Include healthcheck tasks
      ansible.builtin.import_tasks: ../tasks/healthcheck.yaml
      tags: ['healthcheck', 'system']

    - name: Include system-specific maintenance tasks
      ansible.builtin.include_tasks: "{{ system_tasks_file }}"
      vars:
        system_tasks_file: >-
          ../tasks/update_system_{{ ansible_facts['os_family'] | lower }}.yaml
      tags: ['system']

    - name: Include Docker maintenance tasks
      ansible.builtin.import_tasks: ../tasks/update_docker.yaml
      when: "'docker' in ansible_facts.packages | default([])"
      tags: ['docker']

  post_tasks:
    - name: Verify system status after maintenance
      ansible.builtin.import_tasks: ../tasks/verify_system.yaml
      tags: ['verify', 'system']

    - name: Record maintenance end time
      ansible.builtin.set_fact:
        maintenance_end_time: "{{ ansible_date_time.iso8601 }}"
        maintenance_duration: "{{ (ansible_date_time.epoch | int) - (maintenance_start_time | to_datetime('%Y-%m-%dT%H:%M:%SZ') | to_datetime).epoch | int }}"
      tags: always

    - name: Notify maintenance completion
      ansible.builtin.import_tasks: ../tasks/send_notification.yaml
      vars:
        notification_subject: "âœ… Maintenance completed on {{ inventory_hostname }}"
        notification_body: "System maintenance completed at {{ maintenance_end_time }}. Duration: {{ (maintenance_duration / 60) | round(1) }} minutes"
      when: notification_enabled | bool
      tags: ['notification']

  handlers:
    - name: Restart critical services
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop: "{{ critical_services | default([]) }}"
      when: critical_services is defined

- name: Notify Maintenance Success
  hosts: homelab
  gather_facts: yes
  tasks:
    - name: Calculate total duration
      ansible.builtin.set_fact:
        total_duration: "{{ (ansible_date_time.epoch | int) - (hostvars[groups['homelab'][0]]['global_start_time'] | to_datetime('%Y-%m-%dT%H:%M:%SZ') | to_datetime).epoch | int }}"
      run_once: true
      tags: always
      
    - name: Send success notification
      ansible.builtin.import_tasks: ../tasks/send_notification.yaml
      vars:
        notification_subject: "ðŸŽ‰ LabOps Maintenance Completed Successfully"
        notification_body: |
          Maintenance operations have completed successfully on all hosts.
          Total duration: {{ (total_duration / 60) | round(1) }} minutes.
          Completed at: {{ ansible_date_time.iso8601 }}
          
          Systems maintained: {{ ansible_play_hosts | join(', ') }}
      when: notification_enabled | default(false) | bool
      run_once: true
      tags: ['notification', 'always']